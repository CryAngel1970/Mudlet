/****************************************************************************
** Meta object code from reading C++ file 'TMxpTagParserTest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.14.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'TMxpTagParserTest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.14.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TMxpTagParserTest_t {
    QByteArrayData data[34];
    char stringdata0[770];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TMxpTagParserTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TMxpTagParserTest_t qt_meta_stringdata_TMxpTagParserTest = {
    {
QT_MOC_LITERAL(0, 0, 17), // "TMxpTagParserTest"
QT_MOC_LITERAL(1, 18, 12), // "initTestCase"
QT_MOC_LITERAL(2, 31, 0), // ""
QT_MOC_LITERAL(3, 32, 9), // "parseNode"
QT_MOC_LITERAL(4, 42, 23), // "QSharedPointer<MxpNode>"
QT_MOC_LITERAL(5, 66, 7), // "tagText"
QT_MOC_LITERAL(6, 74, 37), // "testMateriaMagicaScriptedActi..."
QT_MOC_LITERAL(7, 112, 34), // "testMateriaMagicaScriptedActi..."
QT_MOC_LITERAL(8, 147, 16), // "testSimpleEndTag"
QT_MOC_LITERAL(9, 164, 24), // "testSimpleTagQuotedSlash"
QT_MOC_LITERAL(10, 189, 12), // "testParseUrl"
QT_MOC_LITERAL(11, 202, 24), // "testParseWithEqualSymbol"
QT_MOC_LITERAL(12, 227, 19), // "testParseWithQuotes"
QT_MOC_LITERAL(13, 247, 16), // "testParseToNodes"
QT_MOC_LITERAL(14, 264, 24), // "testParseToNodesWithText"
QT_MOC_LITERAL(15, 289, 26), // "testParseToNodesIgnoreText"
QT_MOC_LITERAL(16, 316, 35), // "testParseToNodesWithClosedAnd..."
QT_MOC_LITERAL(17, 352, 33), // "testParseToNodesWithTextAndSp..."
QT_MOC_LITERAL(18, 386, 33), // "testComplexElementDefinitionT..."
QT_MOC_LITERAL(19, 420, 16), // "testMxpTagParser"
QT_MOC_LITERAL(20, 437, 18), // "testAttrDefinition"
QT_MOC_LITERAL(21, 456, 27), // "testSimpleElementDefinition"
QT_MOC_LITERAL(22, 484, 36), // "testElementDefinitionWithExtr..."
QT_MOC_LITERAL(23, 521, 42), // "testElementDefinitionQuotedAt..."
QT_MOC_LITERAL(24, 564, 29), // "testAccessAttrCaseInsensitive"
QT_MOC_LITERAL(25, 594, 35), // "testElementDefinitionQuotesIn..."
QT_MOC_LITERAL(26, 630, 19), // "testCompleteElement"
QT_MOC_LITERAL(27, 650, 10), // "testEndTag"
QT_MOC_LITERAL(28, 661, 15), // "testParseEndTag"
QT_MOC_LITERAL(29, 677, 18), // "testStartTagClosed"
QT_MOC_LITERAL(30, 696, 19), // "testQuotedAttrValue"
QT_MOC_LITERAL(31, 716, 15), // "testUnquotedUrl"
QT_MOC_LITERAL(32, 732, 21), // "testEmptyTagWithSlash"
QT_MOC_LITERAL(33, 754, 15) // "cleanupTestCase"

    },
    "TMxpTagParserTest\0initTestCase\0\0"
    "parseNode\0QSharedPointer<MxpNode>\0"
    "tagText\0testMateriaMagicaScriptedActionEndTag\0"
    "testMateriaMagicaScriptedActionTag\0"
    "testSimpleEndTag\0testSimpleTagQuotedSlash\0"
    "testParseUrl\0testParseWithEqualSymbol\0"
    "testParseWithQuotes\0testParseToNodes\0"
    "testParseToNodesWithText\0"
    "testParseToNodesIgnoreText\0"
    "testParseToNodesWithClosedAndEndTag\0"
    "testParseToNodesWithTextAndSpaces\0"
    "testComplexElementDefinitionToTag\0"
    "testMxpTagParser\0testAttrDefinition\0"
    "testSimpleElementDefinition\0"
    "testElementDefinitionWithExtraSpaces\0"
    "testElementDefinitionQuotedAttributeSpaces\0"
    "testAccessAttrCaseInsensitive\0"
    "testElementDefinitionQuotesInQuotes\0"
    "testCompleteElement\0testEndTag\0"
    "testParseEndTag\0testStartTagClosed\0"
    "testQuotedAttrValue\0testUnquotedUrl\0"
    "testEmptyTagWithSlash\0cleanupTestCase"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TMxpTagParserTest[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      30,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  164,    2, 0x08 /* Private */,
       3,    1,  165,    2, 0x08 /* Private */,
       6,    0,  168,    2, 0x08 /* Private */,
       7,    0,  169,    2, 0x08 /* Private */,
       8,    0,  170,    2, 0x08 /* Private */,
       9,    0,  171,    2, 0x08 /* Private */,
      10,    0,  172,    2, 0x08 /* Private */,
      11,    0,  173,    2, 0x08 /* Private */,
      12,    0,  174,    2, 0x08 /* Private */,
      13,    0,  175,    2, 0x08 /* Private */,
      14,    0,  176,    2, 0x08 /* Private */,
      15,    0,  177,    2, 0x08 /* Private */,
      16,    0,  178,    2, 0x08 /* Private */,
      17,    0,  179,    2, 0x08 /* Private */,
      18,    0,  180,    2, 0x08 /* Private */,
      19,    0,  181,    2, 0x08 /* Private */,
      20,    0,  182,    2, 0x08 /* Private */,
      21,    0,  183,    2, 0x08 /* Private */,
      22,    0,  184,    2, 0x08 /* Private */,
      23,    0,  185,    2, 0x08 /* Private */,
      24,    0,  186,    2, 0x08 /* Private */,
      25,    0,  187,    2, 0x08 /* Private */,
      26,    0,  188,    2, 0x08 /* Private */,
      27,    0,  189,    2, 0x08 /* Private */,
      28,    0,  190,    2, 0x08 /* Private */,
      29,    0,  191,    2, 0x08 /* Private */,
      30,    0,  192,    2, 0x08 /* Private */,
      31,    0,  193,    2, 0x08 /* Private */,
      32,    0,  194,    2, 0x08 /* Private */,
      33,    0,  195,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    0x80000000 | 4, QMetaType::QString,    5,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TMxpTagParserTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TMxpTagParserTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: { QSharedPointer<MxpNode> _r = _t->parseNode((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QSharedPointer<MxpNode>*>(_a[0]) = std::move(_r); }  break;
        case 2: _t->testMateriaMagicaScriptedActionEndTag(); break;
        case 3: _t->testMateriaMagicaScriptedActionTag(); break;
        case 4: _t->testSimpleEndTag(); break;
        case 5: _t->testSimpleTagQuotedSlash(); break;
        case 6: _t->testParseUrl(); break;
        case 7: _t->testParseWithEqualSymbol(); break;
        case 8: _t->testParseWithQuotes(); break;
        case 9: _t->testParseToNodes(); break;
        case 10: _t->testParseToNodesWithText(); break;
        case 11: _t->testParseToNodesIgnoreText(); break;
        case 12: _t->testParseToNodesWithClosedAndEndTag(); break;
        case 13: _t->testParseToNodesWithTextAndSpaces(); break;
        case 14: _t->testComplexElementDefinitionToTag(); break;
        case 15: _t->testMxpTagParser(); break;
        case 16: _t->testAttrDefinition(); break;
        case 17: _t->testSimpleElementDefinition(); break;
        case 18: _t->testElementDefinitionWithExtraSpaces(); break;
        case 19: _t->testElementDefinitionQuotedAttributeSpaces(); break;
        case 20: _t->testAccessAttrCaseInsensitive(); break;
        case 21: _t->testElementDefinitionQuotesInQuotes(); break;
        case 22: _t->testCompleteElement(); break;
        case 23: _t->testEndTag(); break;
        case 24: _t->testParseEndTag(); break;
        case 25: _t->testStartTagClosed(); break;
        case 26: _t->testQuotedAttrValue(); break;
        case 27: _t->testUnquotedUrl(); break;
        case 28: _t->testEmptyTagWithSlash(); break;
        case 29: _t->cleanupTestCase(); break;
        default: ;
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject TMxpTagParserTest::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TMxpTagParserTest.data,
    qt_meta_data_TMxpTagParserTest,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *TMxpTagParserTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TMxpTagParserTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TMxpTagParserTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TMxpTagParserTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 30)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 30;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 30)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 30;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
